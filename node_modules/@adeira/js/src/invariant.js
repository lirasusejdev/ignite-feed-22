"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = invariant;

var _sprintf = _interopRequireDefault(require("./sprintf"));

/**
 * Use invariant() to assert state which your program assumes to be true.
 * It is intended to indicate a programmer error for a condition that should
 * never occur.
 *
 * Provide sprintf-style format (only %s is supported) and arguments to provide
 * information about what broke and what you were expecting.
 *
 * The invariant message will be stripped in production, but the invariant will
 * remain to ensure logic does not differ in production.
 *
 * TODO: add something like `invariant_violation` which is basically `invariant` but without condition (in cases where it's obvious violation)?
 */
function invariant(condition, format) {
  if (process.env.NODE_ENV !== "production") {
    if (format === undefined) {
      throw new Error('invariant(...): Second argument must be a string.');
    }
  }

  if (!condition) {
    var error;

    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      error = new Error(_sprintf.default.apply(void 0, [format].concat(args)));
      error.name = 'Invariant Violation';
    }

    throw error;
  }
}