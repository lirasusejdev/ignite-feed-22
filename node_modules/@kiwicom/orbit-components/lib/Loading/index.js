"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StyledSpinner = exports.StyledLoading = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

var _consts = _interopRequireDefault(require("./consts"));

var _rtl = require("../utils/rtl");

const getHeight = ({
  type
}) => {
  const tokens = {
    [_consts.default.BUTTON_LOADER]: "100%",
    [_consts.default.SEARCH_LOADER]: "40px",
    [_consts.default.BOX_LOADER]: "80px",
    [_consts.default.PAGE_LOADER]: "120px",
    [_consts.default.INLINE_LOADER]: "19px"
  };
  return (0, _styledComponents.css)(["", ":", ""], type === _consts.default.INLINE_LOADER ? "min-height" : "height", tokens[type]);
};

const getAlign = ({
  type
}) => {
  const tokens = {
    [_consts.default.BUTTON_LOADER]: "center",
    [_consts.default.SEARCH_LOADER]: "start",
    [_consts.default.BOX_LOADER]: "center",
    [_consts.default.PAGE_LOADER]: "center",
    [_consts.default.INLINE_LOADER]: "center"
  };
  return tokens[type];
}; // Animations


const SpinnerAnimation = (0, _styledComponents.keyframes)(["100%{transform:rotate(360deg);}"]);
const LoaderAnimation = (0, _styledComponents.keyframes)(["0%{opacity:.3;transform:translateY(0px);}20%{opacity:1;transform:translateY(-3px);}40%{opacity:.3;transform:translateY(0px);}100%{opacity:.3;transform:translateY(0px);}"]);
const StyledLoading = (0, _styledComponents.default)(({
  children,
  className,
  dataTest
}) => /*#__PURE__*/React.createElement("div", {
  className: className,
  "data-test": dataTest
}, children)).withConfig({
  displayName: "Loading__StyledLoading",
  componentId: "sc-199xidk-0"
})(["position:", ";top:", ";", ":", ";width:", ";", ";padding:", ";display:", ";flex-direction:", ";justify-content:", ";align-items:center;overflow:hidden;box-sizing:border-box;"], ({
  type
}) => type === _consts.default.BUTTON_LOADER && "absolute", ({
  type
}) => type === _consts.default.BUTTON_LOADER && "0", _rtl.left, ({
  type
}) => type === _consts.default.BUTTON_LOADER && "0", ({
  type
}) => type === _consts.default.BUTTON_LOADER && "100%", getHeight, ({
  theme,
  type
}) => type !== _consts.default.INLINE_LOADER && theme.orbit.paddingLoading, ({
  type
}) => type === _consts.default.INLINE_LOADER ? "inline-flex" : "flex", ({
  type
}) => type === _consts.default.PAGE_LOADER ? "column" : "row", getAlign); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

exports.StyledLoading = StyledLoading;
StyledLoading.defaultProps = {
  theme: _defaultTheme.default
};

const StyledLoadingText = _styledComponents.default.div.withConfig({
  displayName: "Loading__StyledLoadingText",
  componentId: "sc-199xidk-1"
})(["font-family:", ";font-size:", ";color:", ";line-height:", ";margin-top:", ";margin-", ":", ";"], ({
  theme
}) => theme.orbit.fontFamily, ({
  theme
}) => theme.orbit.fontSizeTextNormal, ({
  theme
}) => theme.orbit.colorTextLoading, ({
  theme
}) => theme.orbit.lineHeightTextNormal, ({
  theme,
  type
}) => type === _consts.default.PAGE_LOADER && theme.orbit.spaceMedium, _rtl.left, ({
  theme,
  type
}) => type !== _consts.default.PAGE_LOADER && theme.orbit.spaceSmall); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledLoadingText.defaultProps = {
  theme: _defaultTheme.default
};

const StyledSpinner = _styledComponents.default.svg.withConfig({
  displayName: "Loading__StyledSpinner",
  componentId: "sc-199xidk-2"
})(["width:40px;height:40px;animation:", " 0.75s linear infinite;"], SpinnerAnimation);

exports.StyledSpinner = StyledSpinner;

const StyledSpinnerCircle = _styledComponents.default.circle.withConfig({
  displayName: "Loading__StyledSpinnerCircle",
  componentId: "sc-199xidk-3"
})(["fill:transparent;stroke:", ";stroke-width:3px;stroke-linecap:round;stroke-dasharray:128px;stroke-dashoffset:64px;"], ({
  theme,
  type
}) => type === _consts.default.BUTTON_LOADER ? "currentColor" : theme.orbit.paletteCloudDarker); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledSpinnerCircle.defaultProps = {
  theme: _defaultTheme.default
};

const StyledLoader = _styledComponents.default.div.withConfig({
  displayName: "Loading__StyledLoader",
  componentId: "sc-199xidk-4"
})(["display:flex;justify-content:center;align-items:center;"]);

const StyledLoaderCircle = _styledComponents.default.div.withConfig({
  displayName: "Loading__StyledLoaderCircle",
  componentId: "sc-199xidk-5"
})(["width:8px;height:8px;border-radius:50%;margin-", ":6px;background:", ";animation:", " 1.25s infinite ease-in-out;&:nth-child(2){animation-delay:0.1s;}&:nth-child(3){animation-delay:0.2s;margin:0;}"], _rtl.right, ({
  theme
}) => theme.orbit.paletteCloudDarker, LoaderAnimation); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledLoaderCircle.defaultProps = {
  theme: _defaultTheme.default
};

const Loading = props => {
  const {
    loading = false,
    type = _consts.default.PAGE_LOADER,
    text,
    children,
    dataTest,
    id
  } = props;
  return children && !loading ? children : /*#__PURE__*/React.createElement(StyledLoading, {
    type: type,
    dataTest: dataTest,
    id: id
  }, type === _consts.default.BOX_LOADER || type === _consts.default.SEARCH_LOADER || type === _consts.default.INLINE_LOADER ? /*#__PURE__*/React.createElement(StyledLoader, null, /*#__PURE__*/React.createElement(StyledLoaderCircle, null), /*#__PURE__*/React.createElement(StyledLoaderCircle, null), /*#__PURE__*/React.createElement(StyledLoaderCircle, null)) : /*#__PURE__*/React.createElement(StyledSpinner, {
    viewBox: "0 0 40 40"
  }, /*#__PURE__*/React.createElement(StyledSpinnerCircle, {
    cx: "50%",
    cy: "50%",
    r: "18",
    type: type
  })), type !== _consts.default.BUTTON_LOADER && /*#__PURE__*/React.createElement(StyledLoadingText, {
    type: type
  }, text));
};

Loading.displayName = "Loading";
var _default = Loading;
exports.default = _default;