"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _rtl = require("../utils/rtl");

var _transition = _interopRequireDefault(require("../utils/transition"));

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

var _MenuHamburger = _interopRequireDefault(require("../icons/MenuHamburger"));

var _ButtonLink = _interopRequireDefault(require("../ButtonLink"));

var _useStateWithCallback = _interopRequireDefault(require("../hooks/useStateWithCallback"));

var _useTranslate = _interopRequireDefault(require("../hooks/useTranslate"));

var _mediaQuery = _interopRequireDefault(require("../utils/mediaQuery"));

const NAVBAR_HEIGHT = {
  MOBILE: 52,
  DESKTOP: 64
};

const StyledNavigationBarContent = _styledComponents.default.div.withConfig({
  displayName: "NavigationBar__StyledNavigationBarContent",
  componentId: "sc-xlfrap-0"
})(["", ""], ({
  theme
}) => (0, _styledComponents.css)(["display:block;width:100%;margin-", ":", ";"], _rtl.right, theme.orbit.spaceXSmall)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledNavigationBarContent.defaultProps = {
  theme: _defaultTheme.default
};

const StyledNavigationBar = _styledComponents.default.nav.withConfig({
  displayName: "NavigationBar__StyledNavigationBar",
  componentId: "sc-xlfrap-1"
})(["", ""], ({
  theme,
  shown
}) => (0, _styledComponents.css)(["position:fixed;top:0;left:0;right:0;height:", "px;width:100%;display:flex;align-items:center;background:", ";box-shadow:", ";padding:", ";box-sizing:border-box;z-index:700;transition:", ";transform:translate3d(0,", ",0);", ";"], NAVBAR_HEIGHT.MOBILE, theme.orbit.paletteWhite, theme.orbit.boxShadowFixed, theme.orbit.spaceSmall, (0, _transition.default)(["transform"], "normal", "ease-in-out"), shown ? "0" : `-${NAVBAR_HEIGHT.MOBILE}px`, _mediaQuery.default.tablet((0, _styledComponents.css)(["height:", "px;transform:translate3d(0,", ",0);"], NAVBAR_HEIGHT.DESKTOP, shown ? "0" : `-${NAVBAR_HEIGHT.DESKTOP}px`)))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledNavigationBar.defaultProps = {
  theme: _defaultTheme.default
};

const NavigationBar = ({
  onMenuOpen,
  children,
  dataTest,
  id,
  onShow,
  onHide,
  hideOnScroll = true
}) => {
  const translate = (0, _useTranslate.default)();
  const resolveCallback = React.useCallback(state => {
    if (onHide && !state) onHide();
    if (onShow && state) onShow();
  }, [onHide, onShow]);
  const [shown, setShown] = (0, _useStateWithCallback.default)(true, resolveCallback);
  const [prevScrollPosition, setPrevScrollPosition] = React.useState(0);
  const handleNavigationBarPosition = React.useCallback(() => {
    const currentScrollPosition = window.scrollY || window.pageYOffset || document.documentElement && document.documentElement.scrollTop;
    if (!hideOnScroll) return;

    if (prevScrollPosition < currentScrollPosition && currentScrollPosition > NAVBAR_HEIGHT.DESKTOP) {
      setShown(false);
    } else {
      setShown(true);
    }

    setPrevScrollPosition(currentScrollPosition);
  }, [prevScrollPosition, setShown, hideOnScroll]);
  React.useEffect(() => {
    window.addEventListener("scroll", handleNavigationBarPosition);
    return () => {
      window.removeEventListener("scroll", handleNavigationBarPosition);
    };
  });
  return /*#__PURE__*/React.createElement(StyledNavigationBar, {
    "data-test": dataTest,
    id: id,
    shown: shown
  }, /*#__PURE__*/React.createElement(StyledNavigationBarContent, null, children), onMenuOpen && /*#__PURE__*/React.createElement(_ButtonLink.default, {
    type: "secondary",
    onClick: onMenuOpen,
    iconLeft: /*#__PURE__*/React.createElement(_MenuHamburger.default, null),
    title: translate("navigationbar_open_menu")
  }));
};

var _default = NavigationBar;
exports.default = _default;