"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "StepperStateless", {
  enumerable: true,
  get: function () {
    return _StepperStateless.default;
  }
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _StepperStateless = _interopRequireDefault(require("./StepperStateless"));

var _validateIncrement = _interopRequireDefault(require("../utils/validateIncrement"));

var _validateDecrement = _interopRequireDefault(require("../utils/validateDecrement"));

var _useStateWithCallback = _interopRequireDefault(require("../hooks/useStateWithCallback"));

const _excluded = ["onChange", "defaultValue", "maxWidth"];

const Stepper = _ref => {
  let {
    onChange,
    defaultValue = 0,
    maxWidth = 108
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const [value, setValue] = (0, _useStateWithCallback.default)(defaultValue, onChange);

  const incrementCounter = () => {
    const {
      maxValue = Number.POSITIVE_INFINITY,
      step = 1
    } = props;
    setValue((0, _validateIncrement.default)({
      value,
      maxValue,
      step
    }));
  };

  const decrementCounter = () => {
    const {
      minValue = Number.NEGATIVE_INFINITY,
      step = 1
    } = props;
    setValue((0, _validateDecrement.default)({
      value,
      minValue,
      step
    }));
  };

  const handleKeyDown = ev => {
    if (ev.keyCode === 40) {
      ev.preventDefault();
      decrementCounter();
    }

    if (ev.keyCode === 38) {
      ev.preventDefault();
      incrementCounter();
    }
  };

  const {
    onBlur,
    onFocus,
    disabled,
    name,
    dataTest,
    id,
    minValue,
    maxValue,
    titleIncrement,
    titleDecrement,
    active
  } = props;
  return /*#__PURE__*/React.createElement(_StepperStateless.default, {
    onKeyDown: handleKeyDown,
    maxWidth: maxWidth,
    onIncrement: incrementCounter,
    onDecrement: decrementCounter,
    minValue: minValue,
    maxValue: maxValue,
    onFocus: onFocus,
    onBlur: onBlur,
    active: active,
    disabled: disabled,
    dataTest: dataTest,
    id: id,
    value: value,
    name: name,
    titleIncrement: titleIncrement,
    titleDecrement: titleDecrement
  });
};

var _default = Stepper;
exports.default = _default;