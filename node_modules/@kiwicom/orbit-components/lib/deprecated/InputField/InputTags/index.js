"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _rtl = require("../../../utils/rtl");

var _defaultTheme = _interopRequireDefault(require("../../../defaultTheme"));

var _Tag = require("../../../Tag");

const StyledInputTags = _styledComponents.default.div.withConfig({
  displayName: "InputTags__StyledInputTags",
  componentId: "sc-1ok4vwj-0"
})(["position:relative;margin:", ";display:flex;align-items:center;flex:0 1 auto;height:100%;z-index:2;min-width:50px;overflow:hidden;"], ({
  theme
}) => (0, _rtl.rtlSpacing)(`0 0 0 ${theme.orbit.spaceThreeX}`)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledInputTags.defaultProps = {
  theme: _defaultTheme.default
};

const StyledInputTagsInner = _styledComponents.default.div.withConfig({
  displayName: "InputTags__StyledInputTagsInner",
  componentId: "sc-1ok4vwj-1"
})(["overflow-x:scroll;white-space:nowrap;-ms-overflow-style:none;scrollbar-width:none;display:flex;align-items:center;&::-webkit-scrollbar{display:none;}", " + ", "{margin:", ";}"], _Tag.StyledTag, _Tag.StyledTag, ({
  theme
}) => (0, _rtl.rtlSpacing)(`0 0 0 ${theme.orbit.spaceTwoX}`)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledInputTagsInner.defaultProps = {
  theme: _defaultTheme.default
};

const InputTags = ({
  children
}) => {
  const tagsRef = /*#__PURE__*/React.createRef();
  React.useEffect(() => {
    const handleMouseMove = event => {
      if (tagsRef && tagsRef.current) {
        const {
          isDragging
        } = tagsRef.current;

        if (isDragging && event.movementX) {
          tagsRef.current.scrollLeft -= event.movementX;
        }
      }
    };

    const handleMouseUp = () => {
      if (tagsRef && tagsRef.current) {
        tagsRef.current.isDragging = false;
      }
    };

    const tags = tagsRef.current;

    if (tags) {
      tags.addEventListener("mousemove", handleMouseMove);
      tags.addEventListener("mouseup", handleMouseUp);
    }

    return () => {
      if (tags) {
        tags.removeEventListener("mousemove", handleMouseMove);
        tags.removeEventListener("mouseup", handleMouseUp);
      }
    };
  }, [tagsRef]);
  return /*#__PURE__*/React.createElement(StyledInputTags, null, /*#__PURE__*/React.createElement(StyledInputTagsInner, {
    ref: tagsRef,
    onMouseDown: () => {
      if (tagsRef && tagsRef.current) {
        tagsRef.current.isDragging = true;
      }
    }
  }, children));
};

var _default = InputTags;
exports.default = _default;