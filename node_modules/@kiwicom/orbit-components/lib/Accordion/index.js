"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AccordionSection", {
  enumerable: true,
  get: function () {
    return _AccordionSection.default;
  }
});
exports.default = exports.StyledAccordion = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

var _AccordionContext = require("./AccordionContext");

var _getSpacingToken = _interopRequireDefault(require("../common/getSpacingToken"));

var _AccordionSection = _interopRequireDefault(require("./AccordionSection"));

const StyledAccordion = _styledComponents.default.div.withConfig({
  displayName: "Accordion__StyledAccordion",
  componentId: "sc-1m21o0-0"
})(["width:100%;box-sizing:border-box;position:relative;font-family:", ";margin-bottom:", ";"], ({
  theme
}) => theme.orbit.fontFamily, _getSpacingToken.default); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


exports.StyledAccordion = StyledAccordion;
StyledAccordion.defaultProps = {
  theme: _defaultTheme.default
};

const Accordion = ({
  children,
  dataTest,
  id,
  spaceAfter,
  expandedSection,
  loading,
  onExpand
}) => /*#__PURE__*/React.createElement(StyledAccordion, {
  spaceAfter: spaceAfter,
  id: id,
  "data-test": dataTest
}, children ? React.Children.map(children, item => {
  if (!item) return null;
  const {
    id: innerId
  } = item.props; // Determine if section is expanded

  const isExpanded = expandedSection === id; // Callback with section id
  // onExpand is not required prop to have easier loading use case

  const handleExpand = () => onExpand && onExpand(innerId);

  return /*#__PURE__*/React.createElement(_AccordionContext.Provider, {
    value: {
      expanded: isExpanded,
      onExpand: handleExpand,
      loading
    }
  }, item);
}) : null);

var _default = Accordion;
exports.default = _default;