"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _orbitDesignTokens = require("@kiwicom/orbit-design-tokens");

var _reactPopper = require("react-popper");

var _defaultTheme = _interopRequireDefault(require("../../defaultTheme"));

var _mediaQuery = _interopRequireDefault(require("../../utils/mediaQuery"));

var _Button = _interopRequireDefault(require("../../Button"));

var _useMediaQuery = _interopRequireDefault(require("../../hooks/useMediaQuery"));

var _Translate = _interopRequireDefault(require("../../Translate"));

var _transition = _interopRequireDefault(require("../../utils/transition"));

var _useClickOutside = _interopRequireDefault(require("../../hooks/useClickOutside"));

var _useLockScrolling = _interopRequireDefault(require("../../hooks/useLockScrolling"));

var _ModalContext = require("../../Modal/ModalContext");

var _ButtonPrimitive = require("../../primitives/ButtonPrimitive");

var _consts = require("../../common/consts");

var _boundingClientRect2 = _interopRequireDefault(require("../../utils/boundingClientRect"));

const mobileTop = ({
  theme
}) => theme.orbit.spaceXLarge;

const popoverPadding = ({
  theme
}) => theme.orbit.spaceMedium;

const StyledContentWrapper = _styledComponents.default.div.withConfig({
  displayName: "ContentWrapper__StyledContentWrapper",
  componentId: "sc-15796ki-0"
})(["", ""], ({
  theme,
  windowHeight,
  actionsHeight
}) => (0, _styledComponents.css)(["overflow:auto;border-top-left-radius:", ";border-top-right-radius:", ";position:absolute;left:0;width:100%;background-color:", ";max-height:", "px;bottom:", "px;", ""], theme.orbit.spaceSmall, theme.orbit.spaceSmall, theme.orbit.paletteWhite, windowHeight - actionsHeight - 32, actionsHeight || 0, _mediaQuery.default.largeMobile((0, _styledComponents.css)(["max-height:100%;border-radius:", ";bottom:auto;left:auto;position:relative;"], theme.orbit.borderRadiusNormal)))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledContentWrapper.defaultProps = {
  theme: _defaultTheme.default
};

const StyledActions = _styledComponents.default.div.withConfig({
  displayName: "ContentWrapper__StyledActions",
  componentId: "sc-15796ki-1"
})(["", ""], ({
  theme
}) => (0, _styledComponents.css)(["position:fixed;bottom:0;left:0;width:100%;box-sizing:border-box;padding:", ";padding-top:", ";background-color:", ";", "{width:100%;flex:1 1 auto;}", ";"], popoverPadding, theme.orbit.spaceSmall, theme.orbit.paletteWhite, _ButtonPrimitive.StyledButtonPrimitive, _mediaQuery.default.largeMobile((0, _styledComponents.css)(["position:relative;bottom:auto;left:auto;border-bottom-left-radius:", ";border-bottom-right-radius:3px;", "{width:auto;flex-grow:0;}"], theme.orbit.borderRadiusNormal, _ButtonPrimitive.StyledButtonPrimitive)))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledActions.defaultProps = {
  theme: _defaultTheme.default
};

const StyledPopoverParent = _styledComponents.default.div.withConfig({
  displayName: "ContentWrapper__StyledPopoverParent",
  componentId: "sc-15796ki-2"
})(["", ""], ({
  isInsideModal,
  width,
  shown,
  theme,
  transform,
  top,
  left,
  bottom,
  right,
  position
}) => (0, _styledComponents.css)(["position:fixed;bottom:0;left:0;right:0;height:auto;width:100%;z-index:1000;box-sizing:border-box;box-shadow:", ";background-color:", ";max-height:calc(100% - ", ");&:focus{outline:0;}", ""], theme.orbit.boxShadowRaisedReverse, theme.orbit.backgroundModal, mobileTop, _mediaQuery.default.largeMobile((0, _styledComponents.css)(["top:", ";left:", ";bottom:", ";right:", ";transform:", ";transition:", ";position:", ";z-index:", ";width:", ";border-radius:", ";box-shadow:", ";opacity:", ";max-height:none;"], top, left, bottom, right, transform, (0, _transition.default)(["opacity"], "fast", "ease-in-out"), position, isInsideModal ? "1000" : "710", width ? `${width}` : "auto", theme.orbit.borderRadiusNormal, theme.orbit.boxShadowRaised, shown ? "1" : "0")))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledPopoverParent.defaultProps = {
  theme: _defaultTheme.default
};

const StyledPopoverPadding = _styledComponents.default.div.withConfig({
  displayName: "ContentWrapper__StyledPopoverPadding",
  componentId: "sc-15796ki-3"
})(["padding:", ";"], ({
  noPadding
}) => noPadding ? 0 : popoverPadding); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledPopoverPadding.defaultProps = {
  theme: _defaultTheme.default
};

const StyledPopoverContent = _styledComponents.default.div.withConfig({
  displayName: "ContentWrapper__StyledPopoverContent",
  componentId: "sc-15796ki-4"
})(["", ""], ({
  shownMobile
}) => (0, _styledComponents.css)(["transform:translateY(", ");will-change:transform;transition:", ";", ""], shownMobile ? "0%" : "100%", (0, _transition.default)(["opacity, transform"], "fast", "ease-in-out"), _mediaQuery.default.largeMobile((0, _styledComponents.css)(["transform:none;transition:none;"])))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledPopoverContent.defaultProps = {
  theme: _defaultTheme.default
};

const StyledOverlay = _styledComponents.default.div.withConfig({
  displayName: "ContentWrapper__StyledOverlay",
  componentId: "sc-15796ki-5"
})(["", ""], ({
  theme,
  shown
}) => (0, _styledComponents.css)(["display:block;position:fixed;opacity:", ";top:0;left:0;right:0;width:100%;height:100%;background-color:", ";transition:", ";z-index:999;", ";"], shown ? "1" : "0", (0, _orbitDesignTokens.convertHexToRgba)(theme.orbit.paletteInkNormal, 60), (0, _transition.default)(["opacity", "transform"], "normal", "ease-in-out"), _mediaQuery.default.largeMobile((0, _styledComponents.css)(["display:none;"])))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledOverlay.defaultProps = {
  theme: _defaultTheme.default
};

const StyledPopoverClose = _styledComponents.default.div.withConfig({
  displayName: "ContentWrapper__StyledPopoverClose",
  componentId: "sc-15796ki-6"
})(["padding:", ";", ""], popoverPadding, _mediaQuery.default.largeMobile((0, _styledComponents.css)(["display:none;visibility:hidden;padding-bottom:0;"]))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledPopoverClose.defaultProps = {
  theme: _defaultTheme.default
};

const PopoverContentWrapper = ({
  children,
  onClose,
  width,
  noFlip,
  offset = {
    top: 4,
    left: 0
  },
  referenceElement,
  dataTest,
  id,
  placement = _consts.PLACEMENTS.BOTTOM_START,
  noPadding,
  overlapped,
  shown,
  fixed,
  allowOverflow,
  lockScrolling = true,
  actions
}) => {
  const [actionsHeight, setActionsHeight] = React.useState(null);
  const {
    isInsideModal
  } = React.useContext(_ModalContext.ModalContext);
  const {
    isLargeMobile
  } = (0, _useMediaQuery.default)();
  const actionsRef = React.useRef(null);
  const content = React.useRef(null);
  const scrollingElementRef = React.useRef(null);
  (0, _useLockScrolling.default)(scrollingElementRef, lockScrolling && !isLargeMobile);
  const popoverRef = React.useRef(null);
  const windowHeight = typeof window !== "undefined" ? window.innerHeight : 0;
  const {
    styles,
    update
  } = (0, _reactPopper.usePopper)(referenceElement, popoverRef.current, {
    placement,
    strategy: fixed ? "fixed" : "absolute",
    modifiers: [{
      name: "offset",
      enabled: !!offset,
      options: {
        offset: [offset.left, overlapped ? -Number(referenceElement === null || referenceElement === void 0 ? void 0 : referenceElement.offsetHeight) : offset.top]
      }
    }, {
      name: "flip",
      enabled: !noFlip
    }, {
      name: "preventOverflow",
      enabled: !allowOverflow
    }]
  });
  const {
    popper
  } = styles;
  React.useEffect(() => {
    const timer = setTimeout(() => {
      if (popoverRef.current) {
        popoverRef.current.focus();
      }
    }, 100);
    if (update) update();

    if (actionsRef.current) {
      var _boundingClientRect;

      setActionsHeight((_boundingClientRect = (0, _boundingClientRect2.default)({
        current: actionsRef.current
      })) === null || _boundingClientRect === void 0 ? void 0 : _boundingClientRect.height);
    }

    return () => {
      clearTimeout(timer);
    };
  }, [update, actions, setActionsHeight]);
  (0, _useClickOutside.default)(content, ev => {
    if (isLargeMobile) onClose(ev);
  });

  const handleKeyDown = ev => {
    if (ev.keyCode === 27 && onClose) onClose(ev);
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledOverlay, {
    shown: shown,
    isInsideModal: isInsideModal,
    onMouseDown: onClose
  }), /*#__PURE__*/React.createElement(StyledPopoverParent, (0, _extends2.default)({
    width: width,
    ref: popoverRef,
    tabIndex: "0",
    "data-test": dataTest,
    id: id,
    noPadding: noPadding,
    overlapped: overlapped,
    role: "tooltip",
    onKeyDown: handleKeyDown,
    fixed: fixed,
    shown: shown,
    isInsideModal: isInsideModal
  }, popper), /*#__PURE__*/React.createElement(StyledPopoverContent, {
    ref: content,
    shownMobile: shown
  }, /*#__PURE__*/React.createElement(StyledContentWrapper, {
    actionsHeight: actionsHeight,
    ref: scrollingElementRef,
    windowHeight: windowHeight
  }, /*#__PURE__*/React.createElement(StyledPopoverPadding, {
    noPadding: noPadding
  }, children)), actions ? /*#__PURE__*/React.createElement(StyledActions, {
    ref: actionsRef
  }, actions) : /*#__PURE__*/React.createElement(StyledPopoverClose, {
    ref: actionsRef
  }, /*#__PURE__*/React.createElement(_Button.default, {
    type: "secondary",
    fullWidth: true,
    onClick: onClose
  }, /*#__PURE__*/React.createElement(_Translate.default, {
    tKey: "button_close"
  }))))));
};

var _default = PopoverContentWrapper;
exports.default = _default;