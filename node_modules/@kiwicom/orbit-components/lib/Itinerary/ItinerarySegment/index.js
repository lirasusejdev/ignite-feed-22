"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _context = require("./context");

var _Stack = _interopRequireDefault(require("../../Stack"));

var _getSpacingToken = _interopRequireDefault(require("../../common/getSpacingToken"));

var _defaultTheme = _interopRequireDefault(require("../../defaultTheme"));

var _handleKeyDown = _interopRequireDefault(require("../../utils/handleKeyDown"));

var _Separator = _interopRequireDefault(require("../../Separator"));

var _ChevronRight = _interopRequireDefault(require("../../icons/ChevronRight"));

const StyledWrapper = _styledComponents.default.div.withConfig({
  displayName: "ItinerarySegment__StyledWrapper",
  componentId: "sc-gil19c-0"
})(["", ""], ({
  theme,
  noElevation,
  actionable
}) => (0, _styledComponents.css)(["cursor:", ";margin-bottom:", ";box-shadow:", ";border-radius:", ";padding:", " 0;", ""], actionable && "pointer", _getSpacingToken.default, !noElevation && theme.orbit.boxShadowFixed, theme.orbit.borderRadiusLarge, theme.orbit.spaceSmall, actionable && (0, _styledComponents.css)(["&:hover,&:focus{box-shadow:", ";outline:none;}"], !noElevation && theme.orbit.boxShadowActionActive)));

const StyledBannerWrapper = _styledComponents.default.div.withConfig({
  displayName: "ItinerarySegment__StyledBannerWrapper",
  componentId: "sc-gil19c-1"
})(["", ""], ({
  theme
}) => (0, _styledComponents.css)(["display:flex;align-items:center;width:100%;padding:0 ", ";& > div{max-width:calc(100% - 50px);}"], theme.orbit.spaceMedium)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledWrapper.defaultProps = {
  theme: _defaultTheme.default
};

const ItinerarySegment = ({
  children,
  spaceAfter,
  dataTest,
  noElevation,
  actionable = true,
  onClick,
  banner,
  onBannerClick
}) => {
  const content = React.Children.toArray(children);
  const [opened, setOpened] = React.useState(false);
  const parts = /*#__PURE__*/React.createElement(_Stack.default, {
    direction: "column",
    spacing: "none"
  }, React.Children.map(children, (el, i) => {
    return /*#__PURE__*/React.createElement(_context.ItinerarySegmentContext.Provider, {
      value: {
        index: i,
        opened,
        toggleOpened: () => setOpened(prev => !prev),
        last: i === React.Children.count(children) - 1,
        isNextHidden: content[i + 1] && content[i + 1].props.hidden,
        isPrevHidden: content[i - 1] && content[i - 1].props.hidden,
        isBanner: !!banner,
        count: React.Children.count(children),
        isHidden: el.props.hidden,
        noElevation: !!noElevation
      }
    }, el);
  }));

  const handleClick = ev => {
    if (onClick) onClick(ev);
    setOpened(prev => !prev);
  };

  const handleBannerClick = ev => {
    ev.stopPropagation();

    if (onBannerClick) {
      onBannerClick();
    }
  };

  return /*#__PURE__*/React.createElement(StyledWrapper, {
    actionable: actionable,
    spaceAfter: spaceAfter,
    "data-test": dataTest,
    tabIndex: 0,
    onKeyDown: (0, _handleKeyDown.default)(() => setOpened(prev => !prev)),
    onClick: handleClick,
    noElevation: noElevation
  }, parts, Boolean(banner) && /*#__PURE__*/React.createElement(_Separator.default, {
    spaceAfter: "small"
  }), Boolean(banner) && /*#__PURE__*/React.createElement(StyledBannerWrapper, {
    onClick: handleBannerClick
  }, banner, /*#__PURE__*/React.createElement(_ChevronRight.default, {
    color: "secondary"
  })));
};

var _default = ItinerarySegment;
exports.default = _default;