"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ListItem", {
  enumerable: true,
  get: function () {
    return _ListItem.default;
  }
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

var _consts = require("./consts");

var _getSpacingToken = _interopRequireDefault(require("../common/getSpacingToken"));

var _ListItem = _interopRequireWildcard(require("./ListItem"));

var _ListContext = _interopRequireDefault(require("./ListContext"));

const getSizeToken = ({
  theme,
  size
}) => {
  const sizeTokens = {
    [_consts.SIZES.SMALL]: theme.orbit.fontSizeTextSmall,
    [_consts.SIZES.NORMAL]: theme.orbit.fontSizeTextNormal,
    [_consts.SIZES.LARGE]: theme.orbit.fontSizeTextLarge
  };
  return sizeTokens[size];
};

const getTypeToken = ({
  theme,
  type
}) => {
  const typeTokens = {
    [_consts.TYPES.PRIMARY]: theme.orbit.colorTextPrimary,
    [_consts.TYPES.SECONDARY]: theme.orbit.colorTextSecondary
  };
  return typeTokens[type];
};

const StyledList = (0, _styledComponents.default)(({
  className,
  children,
  dataTest
}) => /*#__PURE__*/React.createElement("ul", {
  className: className,
  "data-test": dataTest
}, children)).withConfig({
  displayName: "List__StyledList",
  componentId: "sc-rq6gj8-0"
})(["", ""], ({
  theme
}) => (0, _styledComponents.css)(["display:flex;width:100%;flex-direction:column;font-family:", ";font-size:", ";line-height:", ";color:", ";list-style:none;padding:0;margin:0;margin-bottom:", ";"], theme.orbit.fontFamily, getSizeToken, _ListItem.getLineHeightToken, getTypeToken, _getSpacingToken.default)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledList.defaultProps = {
  theme: _defaultTheme.default
};

const List = ({
  children,
  size = _consts.SIZES.NORMAL,
  type = _consts.TYPES.PRIMARY,
  dataTest,
  id,
  spaceAfter
}) => /*#__PURE__*/React.createElement(StyledList, {
  type: type,
  size: size,
  dataTest: dataTest,
  id: id,
  spaceAfter: spaceAfter
}, /*#__PURE__*/React.createElement(_ListContext.default.Provider, {
  value: {
    size,
    type
  }
}, children));

var _default = List;
exports.default = _default;