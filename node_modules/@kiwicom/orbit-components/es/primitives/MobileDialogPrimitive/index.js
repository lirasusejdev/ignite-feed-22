import * as React from "react";
import useRandomId from "../../hooks/useRandomId";
import useStateWithTimeout from "../../hooks/useStateWithTimeout";
import Portal from "../../Portal";
import { StyledTooltipChildren } from "../TooltipPrimitive";
import DialogContent from "./components/DialogContent";

const MobileDialog = ({
  children,
  enabled = true,
  renderInPortal = true,
  tabIndex = "0",
  dataTest,
  content,
  stopPropagation = false,
  removeUnderlinedText,
  block = false,
  lockScrolling
}) => {
  const [render, setRender, setRenderWithTimeout, clearRenderTimeout] = useStateWithTimeout(false, 200);
  const [shown, setshown, setshownWithTimeout] = useStateWithTimeout(false, 200);
  const mobileDialogID = useRandomId();
  const handleInMobile = React.useCallback(ev => {
    ev.preventDefault();

    if (stopPropagation) {
      ev.stopPropagation();
    }

    setRender(true);
    setshownWithTimeout(true);
    clearRenderTimeout();
  }, [clearRenderTimeout, setRender, setshownWithTimeout, stopPropagation]);
  const handleOutMobile = React.useCallback(ev => {
    if (stopPropagation) {
      ev.stopPropagation();
    }

    setshown(false);
    setRenderWithTimeout(false);
  }, [setRenderWithTimeout, setshown, stopPropagation]);
  if (!enabled) return children;
  const dialog = /*#__PURE__*/React.createElement(DialogContent, {
    dataTest: dataTest,
    shown: shown,
    lockScrolling: lockScrolling,
    dialogId: mobileDialogID,
    onClose: handleOutMobile
  }, content);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledTooltipChildren, {
    onClick: handleInMobile,
    "aria-describedby": enabled ? mobileDialogID : undefined,
    tabIndex: enabled ? tabIndex : undefined,
    enabled: enabled,
    removeUnderlinedText: removeUnderlinedText,
    block: block
  }, children), enabled && render && (renderInPortal ? /*#__PURE__*/React.createElement(Portal, {
    renderInto: "dialogs"
  }, dialog) : dialog));
};

export default MobileDialog;