import * as React from "react";
import styled from "styled-components";
import { rtlSpacing } from "../../../utils/rtl";
import defaultTheme from "../../../defaultTheme";
import { StyledTag } from "../../../Tag";
const StyledInputTags = styled.div.withConfig({
  displayName: "InputTags__StyledInputTags",
  componentId: "sc-1ok4vwj-0"
})(["position:relative;margin:", ";display:flex;align-items:center;flex:0 1 auto;height:100%;z-index:2;min-width:50px;overflow:hidden;"], ({
  theme
}) => rtlSpacing(`0 0 0 ${theme.orbit.spaceThreeX}`)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledInputTags.defaultProps = {
  theme: defaultTheme
};
const StyledInputTagsInner = styled.div.withConfig({
  displayName: "InputTags__StyledInputTagsInner",
  componentId: "sc-1ok4vwj-1"
})(["overflow-x:scroll;white-space:nowrap;-ms-overflow-style:none;scrollbar-width:none;display:flex;align-items:center;&::-webkit-scrollbar{display:none;}", " + ", "{margin:", ";}"], StyledTag, StyledTag, ({
  theme
}) => rtlSpacing(`0 0 0 ${theme.orbit.spaceTwoX}`)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledInputTagsInner.defaultProps = {
  theme: defaultTheme
};

const InputTags = ({
  children
}) => {
  const tagsRef = /*#__PURE__*/React.createRef();
  React.useEffect(() => {
    const handleMouseMove = event => {
      if (tagsRef && tagsRef.current) {
        const {
          isDragging
        } = tagsRef.current;

        if (isDragging && event.movementX) {
          tagsRef.current.scrollLeft -= event.movementX;
        }
      }
    };

    const handleMouseUp = () => {
      if (tagsRef && tagsRef.current) {
        tagsRef.current.isDragging = false;
      }
    };

    const tags = tagsRef.current;

    if (tags) {
      tags.addEventListener("mousemove", handleMouseMove);
      tags.addEventListener("mouseup", handleMouseUp);
    }

    return () => {
      if (tags) {
        tags.removeEventListener("mousemove", handleMouseMove);
        tags.removeEventListener("mouseup", handleMouseUp);
      }
    };
  }, [tagsRef]);
  return /*#__PURE__*/React.createElement(StyledInputTags, null, /*#__PURE__*/React.createElement(StyledInputTagsInner, {
    ref: tagsRef,
    onMouseDown: () => {
      if (tagsRef && tagsRef.current) {
        tagsRef.current.isDragging = true;
      }
    }
  }, children));
};

export default InputTags;