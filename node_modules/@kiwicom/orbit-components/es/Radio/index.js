import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
const _excluded = ["disabled", "theme", "type", "hasError"];
import * as React from "react";
import styled, { css } from "styled-components";
import { convertHexToRgba } from "@kiwicom/orbit-design-tokens";
import defaultTheme from "../defaultTheme";
import { StyledText } from "../Text";
import { rtlSpacing } from "../utils/rtl";
import getFieldDataState from "../common/getFieldDataState";
import cloneWithTooltip from "../utils/cloneWithTooltip";
import media from "../utils/mediaQuery";

const getBorderColor = () => ({
  theme,
  hasError,
  disabled,
  checked
}) => {
  if (disabled) return theme.orbit.paletteCloudDarker;
  if (checked) return theme.orbit.paletteBlueNormal;
  if (hasError && !disabled && !checked) return theme.orbit.borderColorCheckboxRadioError;
  return theme.orbit.borderColorCheckboxRadio;
};

const getBackground = () => ({
  theme,
  disabled,
  checked
}) => {
  if (disabled && checked) return theme.orbit.paletteCloudDarker;
  if (disabled && !checked) return theme.orbit.paletteCloudNormal;
  return checked ? theme.orbit.paletteBlueNormal : theme.orbit.backgroundInput;
};

const Glyph = styled.span.withConfig({
  displayName: "Radio__Glyph",
  componentId: "sc-crlwn1-0"
})(["visibility:hidden;width:8px;height:8px;background-color:", ";border-radius:", ";flex-shrink:0;"], ({
  theme,
  disabled
}) => disabled ? theme.orbit.paletteCloudNormal : theme.orbit.paletteWhite, ({
  theme
}) => theme.orbit.borderRadiusCircle); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

Glyph.defaultProps = {
  theme: defaultTheme
};
const IconContainer = styled.div.withConfig({
  displayName: "Radio__IconContainer",
  componentId: "sc-crlwn1-1"
})(["", ""], ({
  theme
}) => css(["position:relative;box-sizing:border-box;flex:0 0 auto;display:flex;align-items:center;justify-content:center;background-color:", ";height:", ";width:", ";border-radius:", ";transform:scale(1);transition:all ", " ease-in-out;"], getBackground, theme.orbit.heightCheckbox, theme.orbit.widthCheckbox, theme.orbit.borderRadiusCircle, theme.orbit.durationFast)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

IconContainer.defaultProps = {
  theme: defaultTheme
};
const TextContainer = styled.div.withConfig({
  displayName: "Radio__TextContainer",
  componentId: "sc-crlwn1-2"
})(["display:flex;flex-direction:column;margin:", ";flex:1;"], ({
  theme
}) => rtlSpacing(`0 0 0 ${theme.orbit.spaceXSmall}`)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

TextContainer.defaultProps = {
  theme: defaultTheme
};
const Info = styled.span.withConfig({
  displayName: "Radio__Info",
  componentId: "sc-crlwn1-3"
})(["font-size:", ";color:", ";line-height:", ";"], ({
  theme
}) => theme.orbit.fontSizeFormFeedback, ({
  theme
}) => theme.orbit.colorInfoCheckBoxRadio, ({
  theme
}) => theme.orbit.lineHeightTextSmall); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

Info.defaultProps = {
  theme: defaultTheme
};
const LabelText = styled.span.withConfig({
  displayName: "Radio__LabelText",
  componentId: "sc-crlwn1-4"
})(["", ""], ({
  theme
}) => css(["font-weight:", ";font-size:", ";color:", ";line-height:", ";", "{font-weight:", ";font-size:", ";color:", ";line-height:", ";}"], theme.orbit.fontWeightNormal, theme.orbit.fontSizeFormLabel, theme.orbit.colorFormLabel, theme.orbit.heightCheckbox, StyledText, theme.orbit.fontWeightNormal, theme.orbit.fontSizeFormLabel, theme.orbit.colorFormLabel, theme.orbit.heightCheckbox)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

LabelText.defaultProps = {
  theme: defaultTheme
};
const Input = styled.input.withConfig({
  displayName: "Radio__Input",
  componentId: "sc-crlwn1-5"
})(["position:absolute;opacity:0;&:checked ~ ", " > ", "{font-weight:", ";& > ", "{font-weight:", ";}}&:checked + ", " > ", "{visibility:visible;}&:focus + ", "{outline:0;border:", ";box-shadow:0 0 0 2px ", ";", "}"], TextContainer, LabelText, ({
  theme
}) => theme.orbit.fontWeightMedium, StyledText, ({
  theme
}) => theme.orbit.fontWeightMedium, IconContainer, Glyph, IconContainer, ({
  theme,
  hasError
}) => `2px ${theme.orbit.borderStyleInput} ${hasError ? theme.orbit.paletteRedNormal : theme.orbit.borderColorCheckboxRadioFocus}`, ({
  theme,
  hasError
}) => convertHexToRgba(hasError ? theme.orbit.paletteRedNormal : theme.orbit.borderColorInputFocus, 15), media.largeMobile(css(["border-width:1px;"]))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

Input.defaultProps = {
  theme: defaultTheme
};
const Label = styled(_ref => {
  let {
    disabled,
    theme,
    type,
    hasError
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement("label", props, props.children);
}).withConfig({
  displayName: "Radio__Label",
  componentId: "sc-crlwn1-6"
})(["", ""], ({
  theme,
  disabled
}) => css(["font-family:", ";display:flex;width:100%;flex-direction:row;align-items:self-start;opacity:", ";cursor:", ";position:relative;", "{border:2px solid ", ";}&:hover ", "{border-color:", ";}&:active ", "{border-color:", ";transform:", ";}", ""], theme.orbit.fontFamily, disabled ? theme.orbit.opacityCheckboxDisabled : "1", disabled ? "default" : "pointer", IconContainer, getBorderColor, IconContainer, !disabled && theme.orbit.paletteBlueLightActive, IconContainer, disabled ? getBorderColor : theme.orbit.paletteBlueNormal, !disabled && `scale(${theme.orbit.modifierScaleCheckboxRadioActive})`, media.largeMobile(css(["", "{border:1px solid ", ";}"], IconContainer, getBorderColor)))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

Label.defaultProps = {
  theme: defaultTheme
};
const Radio = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    label,
    value,
    hasError = false,
    disabled = false,
    checked = false,
    onChange,
    name,
    info,
    readOnly,
    id,
    tabIndex,
    dataTest,
    tooltip
  } = props;
  return /*#__PURE__*/React.createElement(Label, {
    disabled: disabled,
    hasError: hasError,
    checked: checked
  }, /*#__PURE__*/React.createElement(Input, {
    "data-test": dataTest,
    "data-state": getFieldDataState(hasError),
    value: value,
    type: "radio",
    disabled: disabled,
    checked: checked,
    id: id,
    onChange: onChange,
    name: name,
    tabIndex: tabIndex,
    ref: ref,
    readOnly: readOnly,
    hasError: hasError
  }), cloneWithTooltip(tooltip, /*#__PURE__*/React.createElement(IconContainer, {
    disabled: disabled,
    checked: checked
  }, /*#__PURE__*/React.createElement(Glyph, {
    disabled: disabled
  }))), (label || info) && /*#__PURE__*/React.createElement(TextContainer, null, label && /*#__PURE__*/React.createElement(LabelText, null, label), info && /*#__PURE__*/React.createElement(Info, null, info)));
});
Radio.displayName = "Radio";
export default Radio;