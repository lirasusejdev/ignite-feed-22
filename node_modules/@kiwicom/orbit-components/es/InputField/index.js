import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
const _excluded = ["component", "className", "children", "spaceAfter", "theme", "$width"],
      _excluded2 = ["type", "size", "theme", "error", "help", "inlineLabel", "dataAttrs", "required", "ariaLabelledby"];
import * as React from "react";
import styled, { css } from "styled-components";
import defaultTheme from "../defaultTheme";
import { SIZE_OPTIONS, TYPE_OPTIONS, TOKENS } from "./consts";
import { StyledServiceLogo } from "../ServiceLogo";
import { rtlSpacing } from "../utils/rtl";
import InputTags from "./InputTags";
import getSpacingToken from "../common/getSpacingToken";
import getFieldDataState from "../common/getFieldDataState";
import useRandomId from "../hooks/useRandomId";
import ErrorFormTooltip from "../ErrorFormTooltip";
import AlertCircle from "../icons/AlertCircle";
import InformationCircle from "../icons/InformationCircle";
import FormLabel from "../FormLabel";
import useErrorTooltip from "../ErrorFormTooltip/hooks/useErrorTooltip";
import formElementFocus from "./helpers/formElementFocus";
import { StyledButtonPrimitiveIconContainer } from "../primitives/ButtonPrimitive/components/ButtonPrimitiveIconContainer";
import mq from "../utils/mediaQuery";

const getToken = name => ({
  theme,
  size
}) => {
  const tokens = {
    [TOKENS.heightInput]: {
      [SIZE_OPTIONS.SMALL]: theme.orbit.heightInputSmall,
      [SIZE_OPTIONS.NORMAL]: theme.orbit.heightInputNormal
    },
    [TOKENS.fontSizeInput]: {
      [SIZE_OPTIONS.SMALL]: theme.orbit.fontSizeInputSmall,
      [SIZE_OPTIONS.NORMAL]: theme.orbit.fontSizeInputNormal
    },
    [TOKENS.iconSize]: {
      [SIZE_OPTIONS.SMALL]: theme.orbit.widthIconSmall,
      [SIZE_OPTIONS.NORMAL]: theme.orbit.widthIconMedium
    }
  };
  return tokens[name][size];
};

const getPadding = () => ({
  theme,
  size
}) => {
  const tokens = {
    [SIZE_OPTIONS.SMALL]: theme.orbit.paddingInputSmall,
    [SIZE_OPTIONS.NORMAL]: theme.orbit.paddingInputNormal
  };
  return rtlSpacing(tokens[size]);
};

const getDOMType = type => {
  if (type === TYPE_OPTIONS.PASSPORTID) {
    return TYPE_OPTIONS.TEXT;
  }

  return type;
};

const Field = styled( /*#__PURE__*/React.forwardRef((_ref, ref) => {
  let {
    component: Component,
    className,
    children,
    spaceAfter,
    theme,
    $width
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(Component, _extends({
    className: className,
    ref: ref
  }, props), children);
})).withConfig({
  displayName: "InputField__Field",
  componentId: "sc-jjv066-0"
})(["", ""], ({
  theme,
  $width
}) => css(["font-family:", ";position:relative;display:block;flex:1 1 100%;width:", ";margin-bottom:", ";"], theme.orbit.fontFamily, $width, getSpacingToken)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

Field.defaultProps = {
  theme: defaultTheme
};
export const FakeInput = styled(({
  children,
  className
}) => /*#__PURE__*/React.createElement("div", {
  className: className
}, children)).withConfig({
  displayName: "InputField__FakeInput",
  componentId: "sc-jjv066-1"
})(["", ""], ({
  theme,
  error,
  disabled
}) => css(["width:100%;position:absolute;z-index:1;top:0;left:0;box-sizing:border-box;height:", ";box-shadow:inset 0 0 0 ", ";background-color:", ";font-size:", ";transition:all ", " ease-in-out;border-radius:6px;", ";"], getToken(TOKENS.heightInput), `${theme.orbit.borderWidthInput} ${error ? theme.orbit.borderColorInputError : theme.orbit.borderColorInput}`, disabled ? theme.orbit.backgroundInputDisabled : theme.orbit.backgroundInput, getToken(TOKENS.fontSizeInput), theme.orbit.durationFast, mq.tablet(css(["border-radius:", ";"], theme.orbit.borderRadiusNormal)))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

FakeInput.defaultProps = {
  theme: defaultTheme
};
export const InputContainer = styled(({
  children,
  className,
  labelRef
}) => /*#__PURE__*/React.createElement("div", {
  ref: labelRef,
  className: className
}, children)).withConfig({
  displayName: "InputField__InputContainer",
  componentId: "sc-jjv066-2"
})(["", ""], ({
  theme,
  disabled,
  error
}) => css(["display:flex;position:relative;flex-direction:row;align-items:center;justify-content:space-between;box-sizing:border-box;height:", ";border-radius:", ";color:", ";font-size:", ";cursor:", ";&:hover > ", "{", ";}"], getToken(TOKENS.heightInput), theme.orbit.borderRadiusNormal, disabled ? theme.orbit.colorTextInputDisabled : theme.orbit.colorTextInput, getToken(TOKENS.fontSizeInput), disabled ? "not-allowed" : "text", FakeInput, !disabled && `box-shadow: inset 0 0 0 ${theme.orbit.borderWidthInput} ${error ? theme.orbit.borderColorInputErrorHover : theme.orbit.borderColorInputHover}`)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

InputContainer.defaultProps = {
  theme: defaultTheme
};
const StyledInlineLabel = styled.div.withConfig({
  displayName: "InputField__StyledInlineLabel",
  componentId: "sc-jjv066-3"
})(["", ""], ({
  theme,
  hasTags,
  hasFeedback
}) => css(["height:100%;display:flex;align-items:center;pointer-events:none;justify-content:center;padding:", ";", "{margin-bottom:0;font-size:", ";line-height:", ";z-index:3;white-space:nowrap;}"], rtlSpacing(`0 0 0 ${!hasTags && hasFeedback ? theme.orbit.spaceXXSmall : theme.orbit.spaceSmall}`), FormLabel, getToken(TOKENS.fontSizeInput), theme.orbit.lineHeightTextNormal)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledInlineLabel.defaultProps = {
  theme: defaultTheme
};
export const Prefix = styled(({
  children,
  className,
  iconRef
}) => /*#__PURE__*/React.createElement("div", {
  className: className,
  ref: iconRef
}, children)).withConfig({
  displayName: "InputField__Prefix",
  componentId: "sc-jjv066-4"
})(["", ""], ({
  theme
}) => css(["height:100%;color:", ";display:flex;align-items:center;pointer-events:none;justify-content:center;padding:", ";z-index:3;& > svg{color:", ";}& * svg,& > svg{width:", ";height:", ";}", "{color:", ";}"], theme.orbit.colorTextInputPrefix, rtlSpacing(`0 0 0 ${theme.orbit.spaceSmall}`), theme.orbit.colorIconInput, getToken(TOKENS.iconSize), getToken(TOKENS.iconSize), StyledButtonPrimitiveIconContainer, theme.orbit.colorIconSecondary)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

Prefix.defaultProps = {
  theme: defaultTheme
};
const Suffix = styled(({
  children,
  className
}) => /*#__PURE__*/React.createElement("div", {
  className: className
}, children)).withConfig({
  displayName: "InputField__Suffix",
  componentId: "sc-jjv066-5"
})(["", ""], ({
  theme
}) => css(["height:", ";color:", ";display:flex;flex-shrink:0;align-items:center;justify-content:center;pointer-events:", ";z-index:3;", "{color:", ";}", "{height:16px;padding:", ";}"], getToken(TOKENS.heightInput), theme.orbit.colorTextInputPrefix, ({
  disabled
}) => disabled && "none", StyledButtonPrimitiveIconContainer, theme.orbit.colorIconSecondary, StyledServiceLogo, rtlSpacing(`0 ${theme.orbit.spaceSmall} 0 0`))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

Suffix.defaultProps = {
  theme: defaultTheme
};
export const Input = styled( /*#__PURE__*/React.forwardRef((_ref2, ref) => {
  let {
    type,
    size,
    theme,
    error,
    help,
    inlineLabel,
    dataAttrs,
    required,
    ariaLabelledby
  } = _ref2,
      props = _objectWithoutProperties(_ref2, _excluded2);

  return /*#__PURE__*/React.createElement("input", _extends({
    type: getDOMType(type)
  }, props, dataAttrs, {
    ref: ref // aria-required is passed to make the field required for screen-reader
    // we do not pass required field by reason, to avoid native browser message
    ,
    "aria-required": required // in case when there is no label
    ,
    "aria-labelledby": ariaLabelledby
  }));
})).withConfig({
  displayName: "InputField__Input",
  componentId: "sc-jjv066-6"
})(["", ""], ({
  theme,
  disabled,
  inlineLabel,
  type
}) => css(["appearance:none;-webkit-text-fill-color:", ";font-family:", ";border:none;padding:", ";font-size:inherit;font-weight:", ";color:inherit;background-color:transparent;cursor:inherit;flex:1 1 20%;width:100%;height:100%;box-sizing:border-box;border-radius:", ";z-index:2;box-shadow:none;min-width:0;font-variant-numeric:", ";letter-spacing:", ";&::-webkit-inner-spin-button,&::-webkit-outer-spin-button{-webkit-appearance:none;margin:0;}&[data-com-onepassword-filled]{background-color:inherit !important;}&:focus{outline:none;& ~ ", "{", "}}&::placeholder{color:", ";opacity:1;}&:-ms-input-placeholder{color:", ";}&::-ms-input-placeholder{color:", ";}&::-ms-clear,&::-ms-reveal{display:none;}"], disabled && theme.orbit.colorTextInputDisabled, theme.orbit.fontFamily, getPadding(), inlineLabel ? theme.orbit.fontWeightMedium : theme.orbit.fontWeightNormal, theme.orbit.borderRadiusNormal, type === TYPE_OPTIONS.PASSPORTID && "tabular-nums", type === TYPE_OPTIONS.PASSPORTID && "2px", FakeInput, formElementFocus, theme.orbit.colorPlaceholderInput, theme.orbit.colorPlaceholderInput, theme.orbit.colorPlaceholderInput)); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

Input.defaultProps = {
  theme: defaultTheme
};
const StyledIconWrapper = styled.span.withConfig({
  displayName: "InputField__StyledIconWrapper",
  componentId: "sc-jjv066-7"
})(["display:flex;"]);
const InputField = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    disabled,
    size = SIZE_OPTIONS.NORMAL,
    type = TYPE_OPTIONS.TEXT,
    label,
    inlineLabel,
    dataTest,
    required,
    error,
    name,
    prefix,
    onChange,
    onFocus,
    onBlur,
    onSelect,
    onMouseUp,
    onMouseDown,
    onKeyUp,
    onKeyDown,
    placeholder,
    minValue,
    maxValue,
    minLength,
    maxLength,
    suffix,
    help,
    helpClosable = true,
    value,
    tags,
    tabIndex,
    readOnly,
    autoComplete,
    autoFocus,
    spaceAfter,
    id,
    width = "100%",
    inputMode,
    insideInputGroup,
    dataAttrs
  } = props;
  const forID = useRandomId();
  const inputId = id || forID;
  const {
    tooltipShown,
    tooltipShownHover,
    setTooltipShown,
    setTooltipShownHover,
    labelRef,
    iconRef,
    handleFocus
  } = useErrorTooltip({
    onFocus
  });
  const shown = tooltipShown || tooltipShownHover;
  const fieldRef = React.useRef(null);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Field, {
    component: label ? "label" : "div",
    $width: width,
    spaceAfter: spaceAfter,
    ref: fieldRef,
    htmlFor: label ? inputId : undefined // enable tooltip on hover, if it's disabled
    ,
    onMouseEnter: () => disabled && inlineLabel ? setTooltipShownHover(true) : undefined,
    onMouseLeave: () => disabled && inlineLabel ? setTooltipShownHover(false) : undefined
  }, label && !inlineLabel && /*#__PURE__*/React.createElement(FormLabel, {
    inlineLabel: inlineLabel,
    filled: !!value,
    required: required,
    error: !!error,
    help: !!help,
    labelRef: labelRef,
    iconRef: iconRef,
    onMouseEnter: () => setTooltipShownHover(true),
    onMouseLeave: () => setTooltipShownHover(false)
  }, label), /*#__PURE__*/React.createElement(InputContainer, {
    size: size,
    disabled: disabled,
    error: error,
    labelRef: label ? null : labelRef
  }, inlineLabel && !tags && (error || help) ? /*#__PURE__*/React.createElement(Prefix, {
    size: size
  }, help && !error && /*#__PURE__*/React.createElement(StyledIconWrapper, {
    ref: iconRef
  }, /*#__PURE__*/React.createElement(InformationCircle, {
    color: "info",
    size: "small"
  })), error && /*#__PURE__*/React.createElement(StyledIconWrapper, {
    ref: iconRef
  }, /*#__PURE__*/React.createElement(AlertCircle, {
    color: "critical",
    size: "small"
  }))) : prefix && /*#__PURE__*/React.createElement(Prefix, {
    size: size
  }, prefix), label && inlineLabel && /*#__PURE__*/React.createElement(StyledInlineLabel, {
    hasTags: !!tags,
    hasFeedback: !!(error || help),
    ref: labelRef,
    size: size
  }, /*#__PURE__*/React.createElement(FormLabel, {
    filled: !!value,
    required: required,
    error: !!error,
    help: !!help,
    inlineLabel: inlineLabel
  }, label)), tags && /*#__PURE__*/React.createElement(InputTags, null, tags), /*#__PURE__*/React.createElement(Input, {
    "data-test": dataTest,
    required: required,
    "data-state": insideInputGroup && typeof error === "undefined" ? undefined : getFieldDataState(!!error),
    onChange: onChange,
    onFocus: handleFocus,
    onBlur: onBlur,
    onKeyUp: onKeyUp,
    onKeyDown: onKeyDown,
    onSelect: onSelect,
    onMouseUp: onMouseUp,
    onMouseDown: onMouseDown,
    name: name,
    type: type,
    value: value,
    placeholder: placeholder,
    disabled: disabled,
    min: minValue,
    max: maxValue,
    minLength: minLength,
    maxLength: maxLength,
    size: size,
    error: insideInputGroup ? undefined : error,
    ref: ref,
    tabIndex: tabIndex,
    ariaLabelledby: !label ? inputId : null,
    inlineLabel: inlineLabel,
    readOnly: readOnly,
    autoComplete: autoComplete,
    autoFocus: autoFocus,
    id: inputId,
    inputMode: inputMode,
    dataAttrs: dataAttrs
  }), suffix && /*#__PURE__*/React.createElement(Suffix, {
    size: size
  }, suffix), /*#__PURE__*/React.createElement(FakeInput, {
    size: size,
    disabled: disabled,
    error: error
  })), !insideInputGroup && /*#__PURE__*/React.createElement(ErrorFormTooltip, {
    help: help,
    id: inputId,
    shown: shown,
    helpClosable: helpClosable,
    onShown: setTooltipShown,
    error: error,
    inputSize: size,
    inlineLabel: inlineLabel,
    referenceElement: inlineLabel && !tags ? iconRef : fieldRef
  })));
});
InputField.displayName = "InputField";
export default InputField;